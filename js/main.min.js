(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = {
  "API_KEY": "f930fd47f302c2716623ac2722b2ccb3",
  "END_POINTS": {
    "GET_RECENTS": "https://api.flickr.com/services/rest/?&method=flickr.photos.getRecent&format=json&nojsoncallback=1&api_key=",
    "GET_TAGS": "https://api.flickr.com/services/rest/?&method=flickr.photos.getInfo&format=json&nojsoncallback=1&api_key="
  },
  "PARAMS": {
    "PER_PAGE": 5,
    "EXTRAS": "url_t"
  }
};

},{}],2:[function(require,module,exports){
'use strict';

var _FlickerApi = require('./services/FlickerApi.js');

var _FlickerApi2 = _interopRequireDefault(_FlickerApi);

var _BuildElements = require('./services/BuildElements.js');

var _BuildElements2 = _interopRequireDefault(_BuildElements);

var _Utils = require('./services/Utils.js');

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_Utils2.default.registerLoadMoreScrollEvent(LoadMoreScrollCallBack);

var INITIAL_REQUEST_NUMBERS = _Utils2.default.getRequestNumbers();
var whileInteretor = 1;

while (whileInteretor <= INITIAL_REQUEST_NUMBERS) {
  getRecentsFlicker();
  whileInteretor++;
}

function LoadTagsCallback(event) {
  var id = event.target.dataset.id;


  _FlickerApi2.default.getTags(id).then(function (result) {
    return _BuildElements2.default.parsePhotoTags(result.photo.tags.tag);
  }).then(function (tagsHtml) {
    return _BuildElements2.default.showTags(event, tagsHtml);
  });
}

function LoadMoreScrollCallBack(event) {
  var DOCUMENT_HEIGHT = document.documentElement.scrollHeight;
  var CLIENT_HEIGHT = document.documentElement.clientHeight;
  var WINDOW_YOFFSET = window.pageYOffset;

  if (DOCUMENT_HEIGHT - (CLIENT_HEIGHT + WINDOW_YOFFSET) < 30) {
    getRecentsFlicker(true);
  }
}

function getRecentsFlicker() {
  var addPage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  _FlickerApi2.default.getRecents(addPage).then(function (result) {
    return _BuildElements2.default.parsePictures(result.photos.photo);
  }).then(function (photosHtml) {
    return _BuildElements2.default.showFlickerContainer(photosHtml);
  }).then(function () {
    return _Utils2.default.registerLoadTagsEvent(LoadTagsCallback);
  });
}

},{"./services/BuildElements.js":3,"./services/FlickerApi.js":4,"./services/Utils.js":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BuildElements = function () {
  function BuildElements() {
    _classCallCheck(this, BuildElements);

    this.flickerContainer = document.querySelector('.flicker');
    this.pictureCardsHtml = '';
  }

  _createClass(BuildElements, [{
    key: 'parsePictures',
    value: function parsePictures(pictures) {
      var _this = this;

      pictures.forEach(function (picture) {
        var url_t = picture.url_t,
            title = picture.title,
            id = picture.id;


        _this.pictureCardsHtml += '<div class="flicker__card">\n                <img src="' + url_t + '"  alt="" class="flicker__image">\n                <h1 class="flicker__image-title">' + title + '</h1>\n                <div class="flicker__tags-container">\n                  <button type="button"\n                          name="button"\n                          class="flicker__tag btn__loadmore"\n                          data-id="' + id + '">\n                    Loag Tags\n                  </button>\n                </div>\n              </div>';
      });

      return this.pictureCardsHtml;
    }
  }, {
    key: 'parsePhotoTags',
    value: function parsePhotoTags(tags) {
      var tagsHtml = '';

      if (tags.length > 0) {
        tags.forEach(function (tag, index) {
          if (index > 1) return false;

          tagsHtml += '<button type="button" name="button" class="flicker__tag">\n                      ' + tag._content + '\n                    </button>';
        });
      }

      return tagsHtml;
    }
  }, {
    key: 'showFlickerContainer',
    value: function showFlickerContainer(photosHtml) {
      this.flickerContainer.innerHTML = photosHtml;
      return true;
    }
  }, {
    key: 'showTags',
    value: function showTags(event, tagsHtml) {
      if (tagsHtml === '') {
        event.toElement.textContent = 'nothing found :(';
      } else {
        event.target.parentElement.innerHTML = tagsHtml;
      }
    }
  }]);

  return BuildElements;
}();

exports.default = new BuildElements();

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ApiConfig = require('../config/ApiConfig');

var _ApiConfig2 = _interopRequireDefault(_ApiConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FlickerApi = function () {
  function FlickerApi() {
    _classCallCheck(this, FlickerApi);

    this.config = _ApiConfig2.default;
    this.page = 1;
    this.maxPages = 200;
  }

  _createClass(FlickerApi, [{
    key: 'getRecents',
    value: function getRecents() {
      var _this = this;

      var addPages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (addPages && this.page <= this.maxPages - 1) {
        this.page++;
      }

      var _config = this.config,
          END_POINTS = _config.END_POINTS,
          API_KEY = _config.API_KEY,
          PARAMS = _config.PARAMS;

      var URL = '' + END_POINTS.GET_RECENTS + API_KEY + '&per_page=' + PARAMS.PER_PAGE + '&page=' + this.page + '&extras=' + PARAMS.EXTRAS;

      return fetch(URL).then(function (response) {
        return response.json();
      }).then(function (response) {
        _this.maxPages = response.photos.pages;
        return response;
      });
    }
  }, {
    key: 'getTags',
    value: function getTags() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var _config2 = this.config,
          END_POINTS = _config2.END_POINTS,
          API_KEY = _config2.API_KEY;

      var URL = '' + END_POINTS.GET_TAGS + API_KEY + '&photo_id=' + id;

      return fetch(URL).then(function (response) {
        return response.json();
      });
    }
  }]);

  return FlickerApi;
}();

exports.default = new FlickerApi();

},{"../config/ApiConfig":1}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);

    this.window = window;
    this.getRequestNumbers();
  }

  _createClass(Utils, [{
    key: "getWindowHeight",
    value: function getWindowHeight() {
      return this.window.innerHeight;
    }
  }, {
    key: "getWindowWidth",
    value: function getWindowWidth() {
      return this.window.innerWidth;
    }
  }, {
    key: "getLinePerRequest",
    value: function getLinePerRequest() {
      var WINDOW_WIDTH = this.getWindowWidth();
      var lines = 2;

      if (WINDOW_WIDTH <= 800) {
        lines = 5;
      } else if (WINDOW_WIDTH > 800 && WINDOW_WIDTH <= 1200) {
        lines = 3;
      }

      return lines;
    }
  }, {
    key: "getRequestNumbers",
    value: function getRequestNumbers() {
      var CARD_MIN_HEIGHT = 184;
      var LINE_PER_REQUEST = this.getLinePerRequest();
      var HEIGHT_PER_REQUEST = CARD_MIN_HEIGHT * LINE_PER_REQUEST;
      var WINDOW_HEIGHT = this.getWindowHeight();

      return Math.ceil(WINDOW_HEIGHT / HEIGHT_PER_REQUEST);
    }
  }, {
    key: "registerLoadTagsEvent",
    value: function registerLoadTagsEvent(callback) {
      var loadMoreBtns = document.querySelectorAll('.btn__loadmore');
      loadMoreBtns.forEach(function (loadMoreBtn, index) {
        loadMoreBtns[index].addEventListener("click", callback);
      });
    }
  }, {
    key: "registerLoadMoreScrollEvent",
    value: function registerLoadMoreScrollEvent(callback) {
      this.window.addEventListener("scroll", callback);
    }
  }]);

  return Utils;
}();

exports.default = new Utils();

},{}]},{},[2]);
